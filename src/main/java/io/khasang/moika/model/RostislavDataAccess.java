package io.khasang.moika.model;

import javafx.util.Pair;

import java.util.List;
import java.util.Map;

/**
 * Доступ к данным через JDBC с некоторой долей бессмысленности и баловства.
 * Created by Rostislav Dublin on 19.02.2017.
 */
public interface RostislavDataAccess {

    /**
     * Запрос данных из указанной сущности БД с возможностью их фильтрации по условию "И"
     * <p>
     * @tableName имя сущности БД (таблицы или представления)
     * @filters опциональный набор элементов фильтрации в виде карты "имя поля -> пара: оператор, значение". Если задана непустая карта, то фильтры при меняются по принципу "И" и по условию "значение поля равно переданному заначению фильтра"
     *
     * @return результирующая коллекция строк сущности БД, подходящих по условиям фильтра. Каждая результирующая строка представлена в виде карты "имя столбца - значение ячейки"
     */
    List<Map<String, Object>> getSelectedDataFromDbEntity(
            String tableName,
            Map<String, Pair<String, String>> filters
    );

    /**
     * Запрос данных из двух сущностей БД, соединённых указанным способом, с возможностью их фильтрации по условию "И"
     * <p>
     * @leftTableName имя левой сущности БД (таблицы или представления)
     * @rightTableName имя правой сущности БД (таблицы или представления)
     * @joinType тип соединения (один из допустимых для данной СУБД, по умолчанию - INNER)
     * @joiners набор условий соединения в виде коллекции, каждый элемент которой - тройка: "имя левого поля -> пара: оператор, имя правого поля"
     * @filters опциональный набор элементов фильтрации в виде карты "имя поля -> пара: оператор, значение". Если задана непустая карта, то фильтры при меняются по принципу "И" и по условию "значение поля равно переданному заначению фильтра"
     *
     * @return результирующая коллекция строк, полученных в результате сочленения указанных сущносей БД указанным способом, подходящих по условиям фильтра. Каждая результирующая строка представлена в виде карты "имя столбца - значение ячейки"
     */
    List<Map<String, Object>> getSelectedDataFromJoinedDbEntities(
            String leftTableName,
            String rightTableName,
            Map<String, Pair<String, String>> joinType,
            Map<String, Pair<String, String>> filters
    );

}
